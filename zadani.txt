Algoritmus determinizace konečného automatu je klíčovým nástrojem v teorii formálních jazyků. Nalézá rozsáhlé praktické využití ve zpracování textu, analýze dat a v různých oblastech informatiky. Tím, že konvertuje nedeterministické automaty na deterministické, umožňuje efektivní analýzu jazyků, což je klíčové v kompilátorech, analýze textu, vyhledávání regulárních výrazů, řízení sítí, databázových systémech a mnoha dalších aplikacích.

Úkolem je najít deterministický konečný automat bez zbytečných a nedosažitelných stavů takový, aby jazyk, který přijímá byl ekvivalentní k jazyku zadaného nedeterministického konečného automatu s více počátečními stavy.

Determinizaci implementujte v podobě funkce programu v C++, jejíž signatura je: DFA determinize ( const MISNFA & nfa );. Vstupem, resp. výstupem algoritmu jsou automaty v podobě struktur MISNFA, resp. DFA reprezentující nedeterministický konečný automat s více poč. stavy, resp. deterministický konečný automat. Tyto struktury jsou definovány v testovacím prostředí, viz ukázka níže. Pro zjednodušení jsou stavy definovány jako hodnoty typu int a symboly abecedy jako hodnoty typu char.

Porovnání automatů s referenčním výsledkem se provádí přes převod na minimální deterministický konečný automat. Vaše výstupy se mohou lišit (např. v pojmenování stavů). Po převedení na minimální automat, které provede testovací prostředí (tj. minimalizace není vaší starostí), však musí dát ekvivalentní automat (pojmenování stavů nehraje roli).

Je zaručeno, že na vstupu přijde validní nedeterministický konečný automat s více počátečními stavy, tedy:

množiny stavů (MISNFA::m_States), počátečních stavů (MISNFA::m_InitialStates) a symbolů abecedy (MISNFA::m_Alphabet) budou neprázdné,
počáteční a koncové stavy z množin MISNFA::m_InitialStates a MISNFA::m_FinalStates budou také prvky množiny stavů MISNFA::m_States,
pokud nebude pro nějaký stav q a symbol abecedy a definovaný přechod v automatu, pak v mapě MISNFA::m_Transitions nebude ke klíči (q, a) přiřazená hodnota prázdná množina, ale tento klíč nebude vůbec existovat,
v mapě přechodů MISNFA::m_Transitions se vyskytují také jen prvky, které jsou specifikovány v množině symbolů abecedy a stavů.
Výsledný DFA musí také splňovat podmínky definice automatu, tedy musí platit to samé co výše pro MISNFA (až na zřejmé změny kvůli rozdílným definicím počátečního stavu a přechodové funkce).

V případě, že jazyk automatu je prázdný, odevzdávejte jednostavový automat nad stejnou abecedou, jako je původní automat.

Odevzdávejte zdrojový soubor, který obsahuje implementaci požadované funkce determinize. Do zdrojového souboru přidejte i další Vaše podpůrné funkce, které jsou z determinize volané. Funkce bude volaná z testovacího prostředí, je proto důležité přesně dodržet zadané rozhraní funkce. Za základ pro implementaci použijte kód z ukázky níže. V kódu chybí vyplnit funkci determinize (a případné další podpůrné funkce). Ukázka obsahuje testovací funkci main, uvedené hodnoty jsou použité při základním testu. Všimněte si, že vkládání hlavičkových souborů, struktur DFA a MISNFA a funkce main jsou zabalené v bloku podmíněného překladu (#ifdef/#endif). Prosím, ponechte bloky podmíněného překladu i v odevzdávaném zdrojovém souboru. Podmíněný překlad Vám zjednoduší práci. Při kompilaci na Vašem počítači můžete program normálně spouštět a testovat. Při kompilaci na Progtestu funkce main a vkládání hlavičkových souborů "zmizí", tedy nebude kolidovat s hlavičkovými soubory a funkcí main testovacího prostředí.

Pro základ implementace můžete využít soubor ke stažení níže v sekci Vzorová data. Tento soubor obsahuje také několik základních testů, mějte však na paměti, že výsledky Vaší ímplementace se mohou lišit. Testy jsou nastaveny podle výsledků, které dává jedno z referenčních řešení. Možná si je tedy budete muset upravit.

Váš program bude spouštěn v omezeném testovacím prostředí. Je omezen dobou běhu (limit je vidět v logu referenčního řešení) a dále je omezena i velikost dostupné paměti.
